// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    PC(in=AOut, load=jumpBit, inc=true, reset=reset, out[0..14]=pc);

	Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=insOrALU);
	Not(in=instruction[15], out=notmsb);
	Or(a=notmsb, b=instruction[5], out=loadA);
	And(a=instruction[15], b=instruction[4], out=loadD);
	And(a=instruction[15], b=instruction[3], out=writeM);
	
	ARegister(in=insOrALU, load=loadA, out=AOut, out[0..14]=addressM);
	DRegister(in=ALUOut, load=loadD, out=DOut);
	
	Mux16(a=AOut, b=inM, sel=instruction[12], out=AOrM);
	
    ALU(x=DOut, y=AOrM, zx=instruction[11], nx=instruction[10], 
		zy=instruction[9], ny=instruction[8], f=instruction[7], 
		no=instruction[6], zr=iszero, ng=isneg, out=outM, out=ALUOut);
	
	Not(in=iszero, out=notiszero);
	Not(in=isneg, out=notisneg);
	
	And(a=instruction[15], b=instruction[0], out=checkgt);
	And(a=checkgt, b=notisneg, out=checkgtneg);
	And(a=checkgtneg, b=notiszero, out=gt);
	
	And(a=instruction[15], b=instruction[1], out=checkeq);
	And(a=checkeq, b=iszero, out=eq);
	
	And(a=instruction[15], b=instruction[2], out=checklt);
	And(a=checklt, b=isneg, out=lt);
	
	Or(a=gt, b=lt, out=gtorlt);
	Or(a=gtorlt, b=eq, out=jumpBit);
}

