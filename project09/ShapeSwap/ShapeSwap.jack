class ShapeSwap {
	field PlayerCursor cursor;
	field int direction;
	
	constructor ShapeSwap new() {
        let cursor = PlayerCursor.new(0, 0, 30);
        let direction = 0;

        return this;
    }
	
	method void dispose() {
        do cursor.dispose();
        do Memory.deAlloc(this);
        return;
    }
	
	method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
			if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }

            // waits for the key to be released.
            if(~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveCursor();
            }
			while(~(key = 0)) {
				let key = Keyboard.keyPressed();
			}
        }
            
        return;
	}

    /** Moves the square by 2 in the current direction. */
    method void moveCursor() {
        if (direction = 1) {
            do cursor.moveUp();
        }
        if (direction = 2) {
            do cursor.moveDown();
        }
        if (direction = 3) {
            do cursor.moveLeft();
        }
        if (direction = 4) {
            do cursor.moveRight();
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }
}