// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {

    IN  // 16-bit inputs:
        x[16], y[16],
        // Control bits:
        zx, // Zero the x input
        nx, // Negate the x input
        zy, // Zero the y input
        ny, // Negate the y input
        f,  // Function code: 1 for add, 0 for and
        no; // Negate the out output

    OUT // 16-bit output
        out[16],

        // ALU output flags
        zr, // 1 if out=0, 0 otherwise
        ng; // 1 if out<0, 0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out=xorzero);
    Not16(in=xorzero, out=notx);
    Mux16(a=xorzero, b=notx, sel=nx, out=xorzeroornotx);

    Mux16(a=y, b=false, sel=zy, out=yorzero);
    Not16(in=yorzero, out=noty);
    Mux16(a=yorzero, b=noty, sel=ny, out=yorzeroornoty);

    Add16(a=xorzeroornotx, b=yorzeroornoty, out=fadd);
    And16(a=xorzeroornotx, b=yorzeroornoty, out=fand);

    Mux16(a=fand, b=fadd, sel=f, out=fout);
    
    Not16(in=fout, out=notfout);
    Mux16(a=fout, b=notfout, sel=no, out=out, 
          out[15]=ng, out[0..7]=low, out[8..15]=high);

    Or8Way(in=low, out=lowor);
    Or8Way(in=high, out=highor);
    Or(a=lowor, b=highor, out=isitzero);
    Not(in=isitzero, out=zr);
}
